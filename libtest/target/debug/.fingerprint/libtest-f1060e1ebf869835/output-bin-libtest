{"message":"recursion limit reached while expanding `$crate::input!`","code":null,"level":"error","spans":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17504,"byte_end":17610,"line_start":555,"line_end":559,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":19228,"byte_end":19324,"line_start":600,"line_end":603,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":18331,"byte_end":18379,"line_start":579,"line_end":579,"column_start":9,"column_end":57,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":9,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":18509,"byte_end":18605,"line_start":582,"line_end":582,"column_start":9,"column_end":105,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":9,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17741,"byte_end":17900,"line_start":564,"line_end":570,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17504,"byte_end":17610,"line_start":555,"line_end":559,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":18331,"byte_end":18379,"line_start":579,"line_end":579,"column_start":9,"column_end":57,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":9,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":18509,"byte_end":18605,"line_start":582,"line_end":582,"column_start":9,"column_end":105,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":9,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17741,"byte_end":17900,"line_start":564,"line_end":570,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17504,"byte_end":17610,"line_start":555,"line_end":559,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":19228,"byte_end":19324,"line_start":600,"line_end":603,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1258,"byte_end":1336,"line_start":62,"line_end":66,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    input! {","highlight_start":5,"highlight_end":13},{"text":"        n:usize,","highlight_start":1,"highlight_end":17},{"text":"        q:usize,","highlight_start":1,"highlight_end":17},{"text":"        pab = [usize; 3 * q],","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":1},{"text":"    // terminator","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [$source]","highlight_start":1,"highlight_end":1},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [$source]","highlight_start":1,"highlight_end":1},{"text":"            @mut []","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [$source]","highlight_start":1,"highlight_end":1},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":1},{"text":"            @var $var","highlight_start":1,"highlight_end":1},{"text":"            @kind []","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":1},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":1},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":1},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":1},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":1},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":1},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":1},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":1},{"text":"        ));","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.1/src/lib.rs","byte_start":17152,"byte_end":19384,"line_start":542,"line_end":606,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`libtest`)","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: recursion limit reached while expanding `$crate::input!`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:62:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    input! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        n:usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        q:usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pab = [usize; 3 * q],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`libtest`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
